
apply plugin: 'java'
apply from: "$rootDir/shared_styleguide.gradle"

repositories {
    mavenCentral()
    maven {
        url = "http://first.wpi.edu/FRC/roborio/maven/release"
    }
}

sourceSets {
    main {
        java {
            srcDirs = ["src", 
                       "../2018NetworkTableViewer/src", 
                       "../SmartDashboardLibs/src/main/java", 
                       "../CoordinateViewerGui/src/BaseYearSpecificGui", 
                       "../CoordinateViewerGui/src/2018Gui", 
                       "../CoordinateViewerGui/src/lib"]
        }
    }
    main {
        resources {
            srcDirs = ["resources"]
        }
    }
}

jar {
   from("../CoordinateViewerGui/src/2018Gui/") {
      include  "**/*.png"
   }
   from("../CoordinateViewerGui/src/lib/") {
      include  "**/*.png"
   }
   from("../2018NetworkTableViewer/src/") {
      include  "**/*-test.xml"
   }
}

ext.getShuffleboardVersion = {
    return "1.3.1"
}

dependencies {
    compile 'jfree:jfreechart:1.0.13'
    compile 'org.yaml:snakeyaml:1.18'
    compile 'org.apache.logging.log4j:log4j-api:2.11.0'
    compile 'org.apache.logging.log4j:log4j-core:2.11.0'
    compile 'log4j:log4j:1.2.16'
    
	compile 'edu.wpi.first.shuffleboard:api:' + getShuffleboardVersion()
	compile 'edu.wpi.first.shuffleboard.plugin:networktables:' + getShuffleboardVersion()
}

task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.baeldung.fatjar.Application'
    }
    baseName = '2018ShuffleboardWidgets-fat'
    
    includeEmptyDirs = false
    outputs.upToDateWhen { false }
    
    from configurations.compile.collect {
        
        if(it.toString().contains("log4j-core")) {
            FileTree filtered = zipTree(it).matching { unused ->
                
                exclude "org/apache/logging/log4j/core/appender/mom/kafka/KafkaManager*.class"
                exclude "org/apache/logging/log4j/core/async/AsyncLogger.class"
                exclude "org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.class"
                exclude "org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor*.class"
                exclude "org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.class"
                exclude "org/apache/logging/log4j/core/async/JCToolsBlockingQueueFactory*.class"
                exclude "org/apache/logging/log4j/core/async/JCToolsBlockingQueueFactory*.class"
                exclude "org/apache/logging/log4j/core/async/RingBufferLogEvent*.class"
                exclude "org/apache/logging/log4j/core/async/RingBufferLogEventHandler.class"
                exclude "org/apache/logging/log4j/core/async/RingBufferLogEventTranslator.class"
                exclude "org/apache/logging/log4j/core/jackson/**/*.class"
                exclude "org/apache/logging/log4j/core/layout/JacksonFactory*.class"
                exclude "org/apache/logging/log4j/core/net/SmtpManager*.class"
                exclude "org/apache/logging/log4j/core/osgi/Activator.class"
                
                exclude "META-INF/versions/9/org/apache/logging/log4j/core/util/SystemClock.class"
            }
            
            filtered
        }
        else if(it.toString().contains("log4j-api")) {
            FileTree filtered = zipTree(it).matching { unused ->
                exclude "org/apache/logging/log4j/util/Activator.class"
                
                exclude "META-INF/**/*"
            }
            
            filtered
        }
        else if(it.toString().contains("log4j")) {
            FileTree filtered = zipTree(it).matching { unused ->
                exclude "org/apache/log4j/or/jms/**/*.class"
                exclude "org/apache/log4j/net/**/*.class"
                exclude "META-INF/**/*"
            }
            
            filtered
        }
        else if(it.toString().contains("jcommon") || it.toString().contains("jfreechart")) {
            FileTree filtered = zipTree(it).matching { unused ->
                exclude "org/jfree/chart/servlet/**/*.class"
            }
            
            filtered
        }
        else { [] }
    }
    
    with jar
}

task install_to_plugin_dir(type: Copy) {
    group = "Network Table GUI"
    description ="Installs the jar to the plugin area"
                    
    from customFatJar.outputs
    into System.getProperty("user.home") + "/Shuffleboard/plugins"
}

import org.gradle.plugins.ide.eclipse.model.AccessRule
eclipse {
    classpath {
        file {
            whenMerged {
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new AccessRule('accessible', 'javafx/**'))
            }
        }
    }
}
////////////////////////////////////////////////////////////////////////////////
