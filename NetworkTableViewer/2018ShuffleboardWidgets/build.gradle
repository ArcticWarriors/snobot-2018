
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'

repositories {
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    maven {
        name = "WPI"
        url = "http://first.wpi.edu/FRC/roborio/maven/release"
    }
}

sourceSets {
    main {
        java {
            srcDirs = ["src", 
                       "../2018NetworkTableViewer/src", 
                       "../SmartDashboardLibs/src", 
                       "../CoordinateViewerGui/src/BaseYearSpecificGui", 
                       "../CoordinateViewerGui/src/2018Gui", 
                       "../CoordinateViewerGui/src/lib"]
        }
    }
    main {
        resources {
            srcDirs = ["resources"]
        }
    }
}

jar {
   from("../CoordinateViewerGui/src/2018Gui/") {
      include  "**/*.png"
   }
   from("../CoordinateViewerGui/src/lib/") {
      include  "**/*.png"
   }
   from("src/") {
      include  "**/*.properties"
   }
}

dependencies {
    compile 'jfree:jfreechart:1.0.13'
    compile 'org.yaml:snakeyaml:1.18'
    compile 'log4j:log4j:1.2.16'
    
	compile 'edu.wpi.first.shuffleboard:api:1.1.0'
	compile 'edu.wpi.first.shuffleboard.plugin:networktables:1.1.0'
}

task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.baeldung.fatjar.Application'
    }
    baseName = '2018ShuffleboardWidgets-fat'
    
    from configurations.compile.collect {
        if(it.toString().contains("log4j")) {
            FileTree filtered = zipTree(it).matching { unused ->
                exclude "org/apache/log4j/or/jms/**/*.class"
                exclude "org/apache/log4j/net/**/*.class"
            }
            
            filtered
        }
        else if(it.toString().contains("jcommon") || it.toString().contains("jfreechart")) {
            FileTree filtered = zipTree(it).matching { unused ->
                exclude "org/jfree/chart/servlet/**/*.class"
            }
            
            filtered
        }
        else { [] }
    }
    
    with jar
}

task install_to_plugin_dir(type: Copy) {
    from customFatJar.outputs
    into System.getProperty("user.home") + "/Shuffleboard/plugins"
}


/////////////////////////////////////////////////////////////////////////////////
// Style/Formatting stuff
checkstyle {
    toolVersion = "8.1"
    configFile = new File(rootDir, "../styleguide/checkstyle.xml")
}

pmd {
    consoleOutput  = true
    reportsDir = file("${project.buildDir}/reports/pmd")
    ruleSetFiles = files(file("../styleguide/pmd-ruleset.xml"))
    ruleSets = []
}

findbugs {
    excludeFilter = file("../styleguide/findbugs_suppressions.xml")
    effort = "max"
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}
/////////////////////////////////////////////////////////////////////////////////

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}


////////////////////////////////////////////////////////////////////////////////
import org.gradle.plugins.ide.eclipse.model.AccessRule
eclipse {
    classpath {
        file {
            whenMerged {
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new AccessRule('accessible', 'javafx/**'))
            }
        }
    }
}
////////////////////////////////////////////////////////////////////////////////
