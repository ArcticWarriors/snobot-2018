buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}
plugins {
    id "java"
    id "eclipse"
    id "idea"
    id "jacoco"
    id "checkstyle"
    id "pmd"
    id "findbugs"
    id "jaci.openrio.gradle.GradleRIO" version "2018.01.21"
    id "com.snobot.simulator.plugin.SnobotSimulatorPlugin" version "2018.01.10"
}

apply plugin: com.snobot.simulator.plugin.SnobotSimulatorPlugin
snobotSimVersions {
    snobotSimVersion = "0.7.3"
}

wpi {
    wpilibVersion = '2018.2.1'
    shuffleboardVersion = '1.1.0'
}
/////////////////////////////////////////////////////////////////////////////////
// Style/Formatting stuff
checkstyle {
    toolVersion = "8.1"
    configFile = new File(rootDir, "styleguide/checkstyle.xml")
}

pmd {
    consoleOutput  = true
    reportsDir = file("${project.buildDir}/reports/pmd")
    ruleSetFiles = files(file("styleguide/pmd-ruleset.xml"))
    ruleSets = []
}

findbugs {
    excludeFilter = file("styleguide/findbugs_suppressions.xml")
    effort = "max"
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// GradleRIO setup
/////////////////////////////////////////////////////////////////////////////////

def TEAM = 174
def ROBOT_CLASS = "org.snobot.Snobot2018"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", jaci.openrio.gradle.frc.RoboRIO) {
            team = TEAM
        }
    }
    artifacts {
        artifact('frcJava', jaci.openrio.gradle.frc.FRCJavaArtifact) {
            targets << "roborio"
        }
    }
}

/////////////////////////////////////////////////////////////////////////////////


repositories {
    mavenLocal()
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs = ["src", 
                       "../SnobotRobotLibs/src",
                       "../SnobotRobotLibs/CheesyPoofsLibs"
                      ]
        }
    }
    test {
        java {
            srcDirs = ["tests", "simulator_extensions"]
        }
    }
}

configurations {
    native3rdPartyDeps
    testRuntime.extendsFrom(native3rdPartyDeps)
}

dependencies {

    // GradleRIO
    compile wpilib()
    compile ctre()
    
    compile 'log4j:log4j:1.2.16'
    
    // Third Party without maven
    compile files('../SnobotRobotLibs/dependencies/RIOdroid.jar')
    
    // Simulator
    testCompile 'junit:junit:4.12'
    testCompile snobotSimCompile()
    testCompile snobotSimJavaCompile()
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
    
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,  exclude: 
                ['com/team254/lib/trajectory/**',
                 'org/snobot/lib/**',
                ])
        })
    }
}


// GradleRIO setup.  Must be after dependencies
jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest jaci.openrio.gradle.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}


task wrapper(type: Wrapper) {
    gradleVersion = '4.2.1'
}

build.dependsOn snobotSimUnzipNativeTools

eclipse.classpath.file {
    withXml {
        provider ->
        provider.asNode().findAll { it.@path.contains("jinput") && !it.@path.contains("natives") }.each {
                def container = it
                container.appendNode('attributes').appendNode('attribute', [name: 'org.eclipse.jdt.launching.CLASSPATH_ATTR_LIBRARY_PATH_ENTRY', value:project.name + "/build/native_libs"])
        }
    }
}

tasks.withType(Test) {
    systemProperty "java.library.path", "$rootDir/build/native_libs"
}
