
apply plugin: "jaci.openrio.gradle.GradleRIO"
apply plugin: "com.snobot.simulator.plugin.SnobotSimulatorPlugin"
apply plugin: "java"

apply plugin: "jacoco"
apply from: "$rootDir/shared_styleguide.gradle"

snobotSimVersions {
    snobotSimVersion = "2018-1.0.0"
    snobotSimCtreVersion = "V0_5.1.2.1"
}

wpi {
    wpilibVersion = '2018.4.1'
    shuffleboardVersion = '1.2.2'
    ctreVersion = "5.1.2.1"
}

/////////////////////////////////////////////////////////////////////////////////
// GradleRIO setup
/////////////////////////////////////////////////////////////////////////////////

def TEAM = 174
def ROBOT_CLASS = "org.snobot.Snobot2018"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", jaci.openrio.gradle.frc.RoboRIO) {
            team = TEAM
        }
    }
    artifacts {
        artifact('frcJava', jaci.openrio.gradle.frc.FRCJavaArtifact) {
            targets << "roborio"
        }
    }
}

/////////////////////////////////////////////////////////////////////////////////

sourceSets {
    main {
        java {
            srcDirs = ["src", 
                       "../SnobotRobotLibs/src/main/java",
                       "../SnobotRobotLibs/CheesyPoofsLibs"
                      ]
        }
    }
    test {
        java {
            srcDirs = ["tests", "simulator_extensions"]
        }
    }
}

dependencies {

    // GradleRIO
    compile wpilib()
    compile ctre()
    
    compile 'org.apache.logging.log4j:log4j-api:2.11.0'
    compile 'org.apache.logging.log4j:log4j-core:2.11.0'
    
    // Third Party without maven
    compile files('../SnobotRobotLibs/dependencies/RIOdroid.jar')
    
    // Simulator
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.2.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
    testRuntime 'org.junit.platform:junit-platform-launcher:1.2.0'
    testCompile snobotSimCompile()
    testCompile snobotSimJavaCompile()
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
    
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,  exclude: 
                ['com/team254/lib/trajectory/**',
                 'org/snobot/lib/**',
                ])
        })
    }
}


// GradleRIO setup.  Must be after dependencies
jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    from "src/log4j.xml"
    manifest jaci.openrio.gradle.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}

eclipse.classpath.file {
    withXml {
        provider ->
        provider.asNode().findAll { it.@path.contains("jinput") && !it.@path.contains("natives") }.each {
                def container = it
                container.appendNode('attributes').appendNode('attribute', [name: 'org.eclipse.jdt.launching.CLASSPATH_ATTR_LIBRARY_PATH_ENTRY', value:project.name + "/build/native_libs"])
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
    ignoreFailures = org.gradle.internal.os.OperatingSystem.current().isMacOsX()
}

tasks.withType(Test) {
    systemProperty "java.library.path", "$projectDir/build/native_libs"
}
